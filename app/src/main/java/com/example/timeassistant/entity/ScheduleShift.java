package com.example.timeassistant.entity;

import android.text.TextUtils;
import android.util.Log;

import com.litesuits.orm.db.annotation.Column;
import com.litesuits.orm.db.annotation.Mapping;
import com.litesuits.orm.db.annotation.PrimaryKey;
import com.litesuits.orm.db.annotation.Unique;
import com.litesuits.orm.db.enums.AssignType;
import com.litesuits.orm.db.enums.Relation;
import com.zkteco.android.framework.db.liteorm.db.annotation.Table;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "ScheduleDepartment".
 */
@Table("ScheduleShift")
public class ScheduleShift extends BaseScheduleItem {
    public static final String COL_SHIFTID = "shiftId";
    public static final String COL_OTSTARTTIME = "otStartTime";
    public static final String COL_OTENDTIME = "otEndTime";
    public static final String COL_STARTTIME0 = "startTime0";
    public static final String COL_ENDTIME0 = "endTime0";
    public static final String COL_STARTTIME1 = "startTime1";
    public static final String COL_ENDTIME1 = "endTime1";
    public static final String COL_DEVICESN = "deviceSn";
    public static final String COL_IDANDDEVICESN = "idAndDeviceSn";

    @PrimaryKey(AssignType.BY_MYSELF)
    @Column(COL_IDANDDEVICESN)
    @Unique
    private String idAndDeviceSn;   //liteOrm 找不到联合主键的用法 ，所以添加该字段用作主键 格式是：“shiftId-devicesn”
    @Column(COL_SHIFTID)
    private long shiftId;
    @Column(COL_OTSTARTTIME)
    private String otStartTime;
    @Column(COL_OTENDTIME)
    private String otEndTime;
    @Column(COL_STARTTIME0)
    private String startTime0;
    @Column(COL_ENDTIME0)
    private String endTime0;
    @Column(COL_STARTTIME1)
    private String startTime1;
    @Column(COL_ENDTIME1)
    private String endTime1;
    @Column(COL_DEVICESN)
    private String deviceSn;

    @Mapping(Relation.ManyToMany)
    private List<SchedulePerson> schedulePersons;

    public List<SchedulePerson> getSchedulePersons() {
        return schedulePersons;
    }

    public void setSchedulePersons(List<SchedulePerson> schedulePerson) {
        this.schedulePersons = schedulePerson;
    }

    // KEEP FIELDS - put your custom fields here
    private static final String TAG = "ScheduleShift";
    // KEEP FIELDS END

    public ScheduleShift() {
    }

    public ScheduleShift(long shiftId) {
        this.shiftId = shiftId;
    }

    public ScheduleShift(long shiftId, String name, String otStartTime, String otEndTime, String startTime0, String endTime0, String startTime1, String endTime1) {
        this.shiftId = shiftId;
        this.mName = name;
        this.otStartTime = otStartTime;
        this.otEndTime = otEndTime;
        this.startTime0 = startTime0;
        this.endTime0 = endTime0;
        this.startTime1 = startTime1;
        this.endTime1 = endTime1;
    }

    public long getShiftId() {
        return shiftId;
    }

    public void setShiftId(long shiftId) {
        this.shiftId = shiftId;
        refreshIdAndDeviceSn();
    }


    public String getOtStartTime() {
        return otStartTime;
    }

    public void setOtStartTime(String otStartTime) {
        this.otStartTime = otStartTime;
    }

    public String getOtEndTime() {
        return otEndTime;
    }

    public void setOtEndTime(String otEndTime) {
        this.otEndTime = otEndTime;
    }

    public String getStartTime0() {
        return startTime0;
    }

    public void setStartTime0(String startTime0) {
        this.startTime0 = startTime0;
    }

    public String getEndTime0() {
        return endTime0;
    }

    public void setEndTime0(String endTime0) {
        this.endTime0 = endTime0;
    }

    public String getStartTime1() {
        return startTime1;
    }

    public void setStartTime1(String startTime1) {
        this.startTime1 = startTime1;
    }

    public String getEndTime1() {
        return endTime1;
    }

    public void setEndTime1(String endTime1) {
        this.endTime1 = endTime1;
    }

    public String getDeviceSn() {
        return deviceSn;
    }

    public void setDeviceSn(String deviceSn) {
        this.deviceSn = deviceSn;
        refreshIdAndDeviceSn();
    }

    public String getIdAndDeviceSn() {
        return idAndDeviceSn;
    }

    public void setIdAndDeviceSn(String idAndDeviceSn) {
        this.idAndDeviceSn = idAndDeviceSn;
    }
// KEEP METHODS - put your custom methods here

    public void refreshIdAndDeviceSn(){
        this.idAndDeviceSn = shiftId + "-" + deviceSn;
    }

    @Override
    public String toString() {
        return "ScheduleShift{" +
                "shiftId=" + shiftId +
                ", name='" + mName + '\'' +
                ", otStartTime='" + otStartTime + '\'' +
                ", otEndTime='" + otEndTime + '\'' +
                ", startTime0='" + startTime0 + '\'' +
                ", endTime0='" + endTime0 + '\'' +
                ", startTime1='" + startTime1 + '\'' +
                ", endTime1='" + endTime1 + '\'' +
                ", deviceSn='" + deviceSn + '\'' +
                '}';
    }

    public void cleanData() {
        otStartTime = "";
        otEndTime = "";
        startTime0 = "";
        endTime0 = "";
        startTime1 = "";
        endTime1 = "";
    }

    private int getMinOnDay(String time) {
        if (TextUtils.isEmpty(time)) {
            return -1;
        }
        String[] t = time.split(":");
        if(t == null || t.length < 2){
            return -1;
        }
        try {
            return Integer.parseInt(t[0]) * 60 + Integer.parseInt(t[1]);
        } catch (Exception e) {
            Log.e(TAG, "getMinOnDay: ", e);
            return 0;
        }
    }

    public boolean checkAvailablebeifen() {
        int start0 = getMinOnDay(startTime0);
        int end0 = getMinOnDay(endTime0);
        int start1 = getMinOnDay(startTime1);
        int end1 = getMinOnDay(endTime1);
        int otStart = getMinOnDay(otStartTime);
        int otEnd = getMinOnDay(otEndTime);

        if (start0 >= end0) return false;
        if (start1 >= end1 && start1 != -1) return false;
        if (otStart >= otEnd && otStart != -1) return false;

        //二次无加班
        if ((start1 == -1 && end1 == -1) && (otStart == -1 && otEnd == -1)) return true;

        //二次有加班
        if ((start1 == -1 && end1 == -1) && (otStart > end0)) return true;

        //四次无加班
        if ((start1 > end0) && (otStart == -1 && otEnd == -1)) return true;

        //四次有加班
        if ((start1 > end0) && (otStart > end1)) return true;

        return false;
//        //下班时间早于上班时间，错误
//        if (getMinOnDay(startTime0) >= getMinOnDay(endTime0)) return false;
//        //只设置了一个上下班时间，返回true
//        if (getMinOnDay(startTime1) == 0 && getMinOnDay(endTime1) == 0
//                && getMinOnDay(otStartTime) == 0 && getMinOnDay(otEndTime) == 0) return true;
//
//        //加班结束早于加班开始，错误
//        if (getMinOnDay(otStartTime) >= getMinOnDay(otEndTime)) return false;
//        //加班开始，早于下班时间(2次打卡),错误
//        if (getMinOnDay(endTime0) >= getMinOnDay(otStartTime)) return false;
//        //一天打2次卡，检查完成
//        if (getMinOnDay(startTime1) == 0 && getMinOnDay(endTime1) == 0) return true;
//
//        if (getMinOnDay(endTime0) >= getMinOnDay(startTime1)) return false;//下午上班早于上午下班
//        if (getMinOnDay(startTime1) >= getMinOnDay(endTime1)) return false;//下午上班，晚于下午下班
//        if (getMinOnDay(endTime1) >= getMinOnDay(otStartTime)) return false;//下午下班，晚于加班开始
//
//        return true;
    }

    public boolean checkAvailable() {
        int start0 = getMinOnDay(startTime0);
        int end0 = getMinOnDay(endTime0);
        int start1 = getMinOnDay(startTime1);
        int end1 = getMinOnDay(endTime1);
        int otStart = getMinOnDay(otStartTime);
        int otEnd = getMinOnDay(otEndTime);

        //二次无加班
        if ((start1 == -1 && end1 == -1) && (otStart == -1 && otEnd == -1)){
            return true;
        } else if ((start1 == -1 && end1 == -1) ) {
            //二次有加班
            if(otStart == -1 && otEnd != -1){
                return false;
            }
            if(otStart != -1 && otEnd == -1){
                return false;
            }

            if (start0 >= end0 ) {
                otStart += 1440;
                otEnd += 1440;
                end0 += 1440;
            }
            if(end0 >= otStart){
                otStart += 1440;
                otEnd += 1440;
            }
            if(otStart >= otEnd){
                otEnd += 1440;
            }
            if((otEnd-start0)>1440)
            {
                return false;
            }else {
                return true;
            }
        }
        else if ((start1 != -1 && end1 != -1) && (otStart == -1 && otEnd == -1)) {
            //四次无加班
            if (start0 >= end0 ) {
                start1 += 1440;
                end1 += 1440;
                end0 += 1440;
            }
            if(end0 >= start1){
                start1 += 1440;
                end1 += 1440;
            }
            if(start1 >= end1){
                end1 += 1440;
            }
            if((end1-start0)>1440)
            {
                return false;
            }else {
                return true;
            }

        }else {
            //四次有加班
            if (start1 == -1 || end1 == -1||start0 == -1 || end0 == -1||otStart == -1 || otEnd == -1) {
                return false;
            }
            if (start0 >= end0 ) {
                start1 += 1440;
                end1 += 1440;
                otStart += 1440;
                otEnd += 1440;
                end0 += 1440;
            }
            if(end0 >= start1){
                start1 += 1440;
                end1 += 1440;
                otStart += 1440;
                otEnd += 1440;
            }
            if(start1 >= end1){
                end1 += 1440;
                otStart += 1440;
                otEnd += 1440;
            }
            if(end1 >= otStart){
                otStart += 1440;
                otEnd += 1440;
            }
            if(otStart >= otEnd){
                otEnd += 1440;
            }

            if((otEnd-start0)>1440)
            {
                return false;
            }else {
                return true;
            }
        }

    }

    public boolean isTwoTimeADay() {
        return getMinOnDay(startTime1) != -1;
    }
    // KEEP METHODS END

}
